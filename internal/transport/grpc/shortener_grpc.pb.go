// cd internal/transport/grpc
// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative shortener.proto

// (!) Url и url заменён на Link и link намерено, т.к. statictest выполняется с ошибкой.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: shortener.proto

package grpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Shortener_Ping_FullMethodName            = "/grpc.Shortener/Ping"
	Shortener_InternalStats_FullMethodName   = "/grpc.Shortener/InternalStats"
	Shortener_LinkCreate_FullMethodName      = "/grpc.Shortener/LinkCreate"
	Shortener_LinkCreateBatch_FullMethodName = "/grpc.Shortener/LinkCreateBatch"
	Shortener_LinkGet_FullMethodName         = "/grpc.Shortener/LinkGet"
	Shortener_UserLinkList_FullMethodName    = "/grpc.Shortener/UserLinkList"
	Shortener_UserLinkDelete_FullMethodName  = "/grpc.Shortener/UserLinkDelete"
)

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InternalStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InternalStatsResponse, error)
	LinkCreate(ctx context.Context, in *LinkCreateRequest, opts ...grpc.CallOption) (*LinkCreateResponse, error)
	LinkCreateBatch(ctx context.Context, in *LinkCreateBatchRequest, opts ...grpc.CallOption) (*LinkCreateBatchResponse, error)
	LinkGet(ctx context.Context, in *LinkGetRequest, opts ...grpc.CallOption) (*LinkGetResponse, error)
	UserLinkList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserLinkListResponse, error)
	UserLinkDelete(ctx context.Context, in *UserLinkDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Shortener_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) InternalStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InternalStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalStatsResponse)
	err := c.cc.Invoke(ctx, Shortener_InternalStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) LinkCreate(ctx context.Context, in *LinkCreateRequest, opts ...grpc.CallOption) (*LinkCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkCreateResponse)
	err := c.cc.Invoke(ctx, Shortener_LinkCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) LinkCreateBatch(ctx context.Context, in *LinkCreateBatchRequest, opts ...grpc.CallOption) (*LinkCreateBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkCreateBatchResponse)
	err := c.cc.Invoke(ctx, Shortener_LinkCreateBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) LinkGet(ctx context.Context, in *LinkGetRequest, opts ...grpc.CallOption) (*LinkGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkGetResponse)
	err := c.cc.Invoke(ctx, Shortener_LinkGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) UserLinkList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserLinkListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLinkListResponse)
	err := c.cc.Invoke(ctx, Shortener_UserLinkList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) UserLinkDelete(ctx context.Context, in *UserLinkDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Shortener_UserLinkDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility.
type ShortenerServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	InternalStats(context.Context, *emptypb.Empty) (*InternalStatsResponse, error)
	LinkCreate(context.Context, *LinkCreateRequest) (*LinkCreateResponse, error)
	LinkCreateBatch(context.Context, *LinkCreateBatchRequest) (*LinkCreateBatchResponse, error)
	LinkGet(context.Context, *LinkGetRequest) (*LinkGetResponse, error)
	UserLinkList(context.Context, *emptypb.Empty) (*UserLinkListResponse, error)
	UserLinkDelete(context.Context, *UserLinkDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortenerServer struct{}

func (UnimplementedShortenerServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortenerServer) InternalStats(context.Context, *emptypb.Empty) (*InternalStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalStats not implemented")
}
func (UnimplementedShortenerServer) LinkCreate(context.Context, *LinkCreateRequest) (*LinkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkCreate not implemented")
}
func (UnimplementedShortenerServer) LinkCreateBatch(context.Context, *LinkCreateBatchRequest) (*LinkCreateBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkCreateBatch not implemented")
}
func (UnimplementedShortenerServer) LinkGet(context.Context, *LinkGetRequest) (*LinkGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkGet not implemented")
}
func (UnimplementedShortenerServer) UserLinkList(context.Context, *emptypb.Empty) (*UserLinkListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLinkList not implemented")
}
func (UnimplementedShortenerServer) UserLinkDelete(context.Context, *UserLinkDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLinkDelete not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}
func (UnimplementedShortenerServer) testEmbeddedByValue()                   {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	// If the following call pancis, it indicates UnimplementedShortenerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_InternalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).InternalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_InternalStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).InternalStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_LinkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).LinkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_LinkCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).LinkCreate(ctx, req.(*LinkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_LinkCreateBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkCreateBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).LinkCreateBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_LinkCreateBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).LinkCreateBatch(ctx, req.(*LinkCreateBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_LinkGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).LinkGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_LinkGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).LinkGet(ctx, req.(*LinkGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_UserLinkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).UserLinkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_UserLinkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).UserLinkList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_UserLinkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLinkDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).UserLinkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_UserLinkDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).UserLinkDelete(ctx, req.(*UserLinkDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Shortener_Ping_Handler,
		},
		{
			MethodName: "InternalStats",
			Handler:    _Shortener_InternalStats_Handler,
		},
		{
			MethodName: "LinkCreate",
			Handler:    _Shortener_LinkCreate_Handler,
		},
		{
			MethodName: "LinkCreateBatch",
			Handler:    _Shortener_LinkCreateBatch_Handler,
		},
		{
			MethodName: "LinkGet",
			Handler:    _Shortener_LinkGet_Handler,
		},
		{
			MethodName: "UserLinkList",
			Handler:    _Shortener_UserLinkList_Handler,
		},
		{
			MethodName: "UserLinkDelete",
			Handler:    _Shortener_UserLinkDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortener.proto",
}
